0TAG_Compound('testCompoundTagOuter'): 3 entries
{
#    TAG_Int('testIntTagOuter1'): 4
#    TAG_Int('testIntTagOuter2'): 5
4    TAG_Compound('testCompoundTagInner'): 3 entries
    {
'        TAG_Int('testIntTagInner1'): 2
'        TAG_Int('testIntTagInner2'): 3
>        TAG_Compound('testCompoundTagDoubleInner'): 2 entries

        {
1            TAG_Int('testIntTagDoubleInner1'): 0
1            TAG_Int('testIntTagDoubleInner2'): 1

        }
    }
}

*TAG_Compound('testCompoundTag8'): 1 entry
{
0    TAG_Compound('testCompoundTag7'): 3 entries
    {
"        TAG_Int('testIntTag'): 88
"        TAG_Int('testIntTag'): 38
4        TAG_Compound('testCompoundTag6'): 4 entries

        {
&            TAG_Int('testIntTag'): 37
&            TAG_Int('testIntTag'): 45
&            TAG_Int('testIntTag'): 54
8            TAG_Compound('testCompoundTag5'): 2 entries
            {
*                TAG_Int('testIntTag'): 63
<                TAG_Compound('testCompoundTag4'): 3 entries
                {
/                    TAG_Int('testIntTag'): 100
-                    TAG_Int('testIntTag'): 2
@                    TAG_Compound('testCompoundTag3'): 2 entries
                    {
2                        TAG_Int('testIntTag'): 54
D                        TAG_Compound('testCompoundTag2'): 3 entries
                        {
6                            TAG_Int('testIntTag'): 27
5                            TAG_Int('testIntTag'): 8
H                            TAG_Compound('testCompoundTag1'): 2 entries
                            {
:                                TAG_Int('testIntTag'): 29
L                                TAG_Compound('testCompoundTag0'): 2 entries
"                                {
>                                    TAG_Int('testIntTag'): 35
R                                    TAG_Compound('testCompoundTagOuter'): 1 entry
&                                    {
B                                        TAG_Int('testIntTag'): 42
&                                    }
"                                }
                            }
                        }
                    }
                }
            }

        }
    }
}

0TAG_Compound('testCompoundTagOuter'): 3 entries
{
#    TAG_Int('testIntTagOuter1'): 3
#    TAG_Int('testIntTagOuter2'): 4
4    TAG_Compound('testCompoundTagInner'): 2 entries
    {
'        TAG_Int('testIntTagInner1'): 1
'        TAG_Int('testIntTagInner2'): 2
    }
}

)TAG_Compound('testCompoundTag'): 1 entry
{
    TAG_Int('testIntTag'): 1
}

